#!/bin/bash# Fail hard and fast if any intermediate command pipeline failsset -eNETNS=latency-networkSERVER_IF=veth-serverCLIENT_IF=veth-client# The delay in uSecsDELAY=100000function help {echo "$0 <Server IP> <Client IP> [CMD [ARGS ....]]"echo ""echo "    Server IP: IP address assigned to the server"echo "    Client IP: IP address assigned to the client, Must be"echo "               in the same /24 subnet as the server"echo "    CMD/ARGS:  The command/server to execute at the other"echo "               end of the high latency link, DEFAULT=/bin/sh"}if [ "$1" == "-h" ]; thenhelpexit 0fiif [ "$1" == "" ]; then1
echo "Error: Please specify an IPv4 Address for the server"echohelpexit 1fiif [ "$2" == "" ]; thenecho "Error: Please specify an IPv4 Address for the client"echohelpexit 1fiSERVER_IP=$1CLIENT_IP=$2shift 2if [ "$1" == "" ]; thenecho "No command specified, using /bin/sh"CMD=/bin/shARGS=""elseCMD=$1shiftARGS=$*fi# Create the networking pairip li add $SERVER_IF type veth peer name $CLIENT_IF# Automatically clean up interfaces on script exittrap "ip li del $CLIENT_IF" EXIT# Assign the requested IP addressesip ad add $CLIENT_IP/24 dev $CLIENT_IF# Bring the interfaces up in the correct orderip li set $CLIENT_IF up# Create a net namespace and set it up with the server interfaceip netns add $NETNStrap "ip li del $CLIENT_IF; ip netns del $NETNS" EXITip li set $SERVER_IF netns $NETNS# Set IP networking in the containerip netns exec $NETNS ip ad add $SERVER_IP/24 dev $SERVER_IFip netns exec $NETNS ip li set $SERVER_IF upip netns exec $NETNS ip ro add default via $CLIENT_IP# Execute the command in the namespaceip netns exec $NETNS $CMD $ARGS